use std::fs::{self, File};
use std::io::{BufRead, BufReader, Read, Write};
use std::path::Path;

fn main() -> std::io::Result<()> {
    let test_cases_dir = Path::new("tests/data/jsonish_cases");
    let out_dir = std::env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("generated_tests.rs");
    let mut f = File::create(&dest_path)?;

    for entry in fs::read_dir(test_cases_dir)? {
        let entry = entry?;
        let path = entry.path();
        if path.is_file() && path.extension().map_or(false, |e| e == "md") {
            let test_name = path
                .file_stem()
                .unwrap()
                .to_str()
                .unwrap()
                .replace("-", "_");
            let mut file = BufReader::new(File::open(path)?);
            let mut buf = String::new();
            file.read_to_string(&mut buf)?;

            // find index of the last ```json
            let start = buf.rfind("```json").unwrap();
            let end = buf.rfind("```").unwrap();
            let json_str = &buf[start + 6..end].trim();
            let test_case = buf[..start].trim();

            // Here you would generate your test function in the `generated_tests.rs` file
            // For example:
            writeln!(
                f,
                r##"#[test]
fn test_{test_name}() {{
    let raw_input = r#"{test_case}"#;
    let expected_output = json!({json_str});
    let actual_output = // Your function call here
    assert_eq!(actual_output, expected_output, "Test failed: {{}}", "{{}}");
}}"##
            )?;
        }
    }
    Ok(())
}
