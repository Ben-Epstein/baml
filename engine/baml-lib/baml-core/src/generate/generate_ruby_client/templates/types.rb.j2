require "delegate"
require "sorbet-runtime"
require "sorbet-coerce"

module Baml
  module Types
    class FunctionResult < SimpleDelegator
      extend T::Sig
      extend T::Generic

      ParsedType = type_member

      sig { returns(ParsedType) }
      attr_reader :parsed

      sig { params(inner: Baml::FunctionResult, parsed: ParsedType).void }
      def initialize(inner:, parsed:)
        @inner = inner
        @parsed = parsed
      end
    end

    {%- for enum in enums %}
{{ enum }}
    {%- endfor %}
    {%- for forward_decl in forward_decls %}
    {{ forward_decl }}
    {%- endfor %}
    {%- for cls in classes %}
{{ cls }}
    {%- endfor %}
  end
end