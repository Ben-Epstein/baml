use std::collections::{HashMap, HashSet};

use crate::generate::dir_writer::{FileCollector, Import, LanguageFeatures, LibImport};

pub(super) struct RubyLanguageFeatures {}

impl LanguageFeatures for RubyLanguageFeatures {
    fn content_prefix(&self) -> &'static str {
        // "typed: strict" is for compat with sorbet
        r#"
###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ bundle add sorbet sorbet sorbet-runtime sorbet-coerce
#
###############################################################################

# This file was generated by BAML: please do not edit it.
#
# frozen_string_literal: true
# rubocop: disable
# formatter:off
        "#
        .trim()
    }

    fn format_exports(&self, _exports: &Vec<String>) -> String {
        "".to_string()
    }

    fn format_imports(&self, _libs: &HashSet<LibImport>, _imports: &Vec<Import>) -> String {
        "".to_string()
    }

    fn to_file_path(&self, path: &str, name: &str) -> std::path::PathBuf {
        std::path::PathBuf::from(format!("{}/{}.rb", path, name).to_lowercase())
    }
}

pub(super) trait ToRuby {
    fn to_ruby(&self) -> String;
}

pub(super) type TSFileCollector = FileCollector<RubyLanguageFeatures>;

pub(super) fn get_file_collector() -> TSFileCollector {
    TSFileCollector::new(RubyLanguageFeatures {})
}
