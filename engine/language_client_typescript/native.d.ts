/* auto-generated by NAPI-RS */
/* eslint-disable */
export class BamlImagePy {
  static fromUrl(url: string): BamlImagePy
  static fromBase64(mediaType: string, base64: string): BamlImagePy
  isUrl(): boolean
  get url(): string
  get base64(): Array<string>
  toJson(): any
}

export class BamlRuntimePy {
  static fromDirectory(directory: string, envVars: Record<string, string>): BamlRuntimePy
  createContextManager(): RuntimeContextManagerPy
  callFunction(functionName: string, args: any, ctx: RuntimeContextManagerPy): Promise<FunctionResultPy>
  streamFunction(functionName: string, args: any, cb: (FunctionResultPy) => void, ctx: RuntimeContextManagerPy): FunctionResultStreamPy
  flush(): void
}

export class BamlSpanPy {
  static new(runtime: BamlRuntimePy, functionName: string, args: any, ctx: RuntimeContextManagerPy): BamlSpanPy
  finish(result: any, ctx: RuntimeContextManagerPy): Promise<any>
}

export class FunctionResultPy {
  parsed(): any
}

export class FunctionResultStreamPy {
  onEvent(func: (FunctionResultPy) => void): void
  done(rctx: RuntimeContextManagerPy): Promise<FunctionResultPy>
}

export class RuntimeContextManagerPy {
  upsertTags(tags: any): void
  deepClone(): RuntimeContextManagerPy
}

