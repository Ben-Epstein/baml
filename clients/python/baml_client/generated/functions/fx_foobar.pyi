# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.
#
# BAML version: 0.0.1
# Generated Date: 2023-10-24 15:44:55.523214 -07:00
# Generated by: aaronvillalpando

from ..types.classes.cls_bar import Bar
from typing import Protocol, runtime_checkable


import typing

import pytest

ImplName = typing.Literal["SomeName2"]

T = typing.TypeVar("T", bound=typing.Callable[..., typing.Any])
CLS = typing.TypeVar("CLS", bound=type)


@runtime_checkable
class IFooBar(Protocol):
    """
    This is the interface for a function.

    Args:
        arg: Bar

    Returns:
        Bar
    """

    async def __call__(self, *, arg: Bar) -> Bar:
        ...


class BAMLFooBarImpl:
    async def run(self, *, arg: Bar) -> Bar:
        ...

class IBAMLFooBar:
    def register_impl(
        self, name: ImplName
    ) -> typing.Callable[[IFooBar], IFooBar]:
        ...

    def get_impl(self, name: ImplName) -> BAMLFooBarImpl:
        ...

    @typing.overload
    def test(self, test_function: T) -> T:
        """
        Provides a pytest.mark.parametrize decorator to facilitate testing different implementations of
        the FooBarInterface.

        Args:
            test_function : T
                The test function to be decorated.

        Usage:
            ```python
            # All implementations will be tested.

            @baml.FooBar.test
            def test_logic(FooBarImpl: IFooBar) -> None:
                result = await FooBarImpl(...)
            ```
        """
        ...

    @typing.overload
    def test(self, *, exclude_impl: typing.Iterable[ImplName]) -> pytest.MarkDecorator:
        """
        Provides a pytest.mark.parametrize decorator to facilitate testing different implementations of
        the FooBarInterface.

        Args:
            exclude_impl : Iterable[ImplName]
                The names of the implementations to exclude from testing.

        Usage:
            ```python
            # All implementations except "SomeName2" will be tested.

            @baml.FooBar.test(exclude_impl=["SomeName2"])
            def test_logic(FooBarImpl: IFooBar) -> None:
                result = await FooBarImpl(...)
            ```
        """
        ...

    @typing.overload
    def test(self, test_class: typing.Type[CLS]) -> typing.Type[CLS]:
        """
        Provides a pytest.mark.parametrize decorator to facilitate testing different implementations of
        the FooBarInterface.

        Args:
            test_class : Type[CLS]
                The test class to be decorated.

        Usage:
        ```python
        # All implementations will be tested in every test method.

        @baml.FooBar.test
        class TestClass:
            def test_a(self, FooBarImpl: IFooBar) -> None:
                ...
            def test_b(self, FooBarImpl: IFooBar) -> None:
                ...
        ```
        """
        ...

BAMLFooBar: IBAMLFooBar
