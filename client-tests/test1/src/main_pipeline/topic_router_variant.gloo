@variant[llm] v1 for TopicRouter {
    @client[llm] AZURE_DEFAULT

    @stringify Topic {
        ANSWERING_SYSTEM @rename{SEARCH_COMMUNITY_DOCS}
        @describe{questions about the resident portal, office information, office hours, account status, rent payment information, fees to be paid on time, renovations and alterations, landscaping, resident maintenance responsibilities, emergencies, pets, roommates, moving out, security deposits, the resident's lease, noise levels, utilities, cable, pool, amenities, key fobs, and general parking policy}
        
        ACCOUNT_BALANCE
        @describe{questions about account balance, current balance, or balance. Input may be a partial or fully formed question}
        
        VEHICLE_REGISTRATION
        @describe{questions about a resident's vehicles, cars, parking pass details, or anything related to their own methods of transportation}
        
        VIOLATIONS @skip
        PAYMENT_HISTORY @skip
        PAYMENT_METHOD @skip
        
        REQUESTED_ESCALATION @rename{MANAGER_REQUESTED}
        @describe{when the user has requested to speak to a manager}

        UPDATE_CONTACT_INFO
        @describe{When the user has requested to update their address or contact information}
        
        MAINTENANCE_REQUEST @rename{MAINTENANCE_ISSUES}
        @describe{complaints related to common area maintenance, gate issues, clubhouse issues, pool issues, road issues, or anything related to the maintenance of the resident's property}
        
        LANDSCAPING_REQUEST @rename{LANDSCAPING_ISSUES}
        @describe{complaints related to adding, removing, or changing the lawn, shrubbery, weeds, or any other plants}
        
        COMPLAINTS @rename{RESIDENT_ISSUES}
        @describe{complaints related to neighbors, parking or noise}
        
        NO_REPLY     
        @describe{questions/messages that do not require a reply (thank you's, hi's, etc.)}
        
        OTHER
        @describe{questions that do not fit into any of the other categories}
    }

    @prompt {
        Given the user query, determine the output classification so I can route them to the right context.

        ResidentTopic:
        {@Topic.values}

        
        INPUT: {@input}

        OUTPUT:
        {
            "reasoning": "clues ",
            "topic": ResidentTopic,
            "why": string
        }

        JSON:
    }

    @method parser_middleware {
        @lang[py] {
            def parser_middleware(llm_response: str) -> str:
                return json.loads(llm_response).get('topic')
        }
    }
}
