@class ProposedMessage {
    thread Conversation
    generated_response string 
}

@class ImprovedResponse {
    should_improve bool
    improved_response string?
}

@function MaybePolishText {
    @input ProposedMessage
    @output ImprovedResponse
}

@function TextPolisher {
    @input ProposedMessage
    @output string
}

@variant[code] v1 for TextPolisher {
    @depends_on {
        MaybePolishText
    }
    @method impl {
        @lang[py] {
            async def impl(input: InputType) -> OutputType:
                if len(input.thread.thread) > 1:
                    try:
                        res = await MaybePolishText('v1_AZURE_DEFAULT', input)
                        if res.should_improve and res.improved_response:
                            return res.improved_response
                    except:
                        pass
                return input.generated_response
        }
    }
}

@variant[llm] v1 for MaybePolishText {
    @client[llm] AZURE_GPT4 AZURE_DEFAULT

    @stringify ImprovedResponse {
        should_improve @describe{false if the response is already contextual and pleasant}
        improved_response @describe{string if should_improve else null}
    }

    @prompt {
        Given a conversation with a resident, consider improving the response previously shown.

        Good responses are amiable and direct.

        Do not use affirmative or negative unless the question is a yes or no question.

        Thread until now:
        {@input.conversation.as_str}

        Previous Response: {@input.generated_response}

        Output JSON:
        {@ImprovedResponse.json}

        JSON:
    }
}
