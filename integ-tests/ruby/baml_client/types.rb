###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ bundle add sorbet sorbet sorbet-runtime sorbet-coerce
#
###############################################################################

# This file was generated by BAML: please do not edit it.
#
# frozen_string_literal: true
# rubocop: disable
# formatter:off

require "delegate"
require "sorbet-runtime"
require "sorbet-coerce"

module Baml
  module Types
    class FunctionResult < SimpleDelegator
      extend T::Sig
      extend T::Generic

      ParsedType = type_member

      def initialize(val:)
        @inner = val
      end

      def parsed
        TypeCoerce[ParsedType].new.from(@inner.parsed)
      end
    end

    class Category < T::Enum
      enums do
        Refund = new
        CancelOrder = new
        TechnicalSupport = new
        AccountIssue = new
        Question = new
        end
    end

    class Category2 < T::Enum
      enums do
        Refund = new
        CancelOrder = new
        TechnicalSupport = new
        AccountIssue = new
        Question = new
        end
    end

    class Category3 < T::Enum
      enums do
        Refund = new
        CancelOrder = new
        TechnicalSupport = new
        AccountIssue = new
        Question = new
        end
    end

    class DataType < T::Enum
      enums do
        Resume = new
        Event = new
        end
    end

    class EnumInClass < T::Enum
      enums do
        ONE = new
        TWO = new
        end
    end

    class EnumOutput < T::Enum
      enums do
        ONE = new
        TWO = new
        THREE = new
        end
    end

    class NamedArgsSingleEnum < T::Enum
      enums do
        ONE = new
        TWO = new
        end
    end

    class NamedArgsSingleEnumList < T::Enum
      enums do
        ONE = new
        TWO = new
        end
    end

    class OptionalTest_CategoryType < T::Enum
      enums do
        Aleph = new
        Beta = new
        Gamma = new
        end
    end

    class OrderStatus < T::Enum
      enums do
        ORDERED = new
        SHIPPED = new
        DELIVERED = new
        CANCELLED = new
        end
    end

    class OverrideEnum < T::Enum
      enums do
        ONE = new
        TWO = new
        end
    end

    class Tag < T::Enum
      enums do
        Security = new
        AI = new
        Blockchain = new
        end
    end

    class TestEnum < T::Enum
      enums do
        A = new
        B = new
        C = new
        D = new
        E = new
        F = new
        G = new
        end
    end
    class Blah < T::Struct; end
    class ClassOptionalFields < T::Struct; end
    class ClassOptionalOutput < T::Struct; end
    class ClassOptionalOutput2 < T::Struct; end
    class DynamicPropsClass < T::Struct; end
    class Email < T::Struct; end
    class Event < T::Struct; end
    class Message < T::Struct; end
    class ModifiedOutput < T::Struct; end
    class NamedArgsSingleClass < T::Struct; end
    class OptionalClass < T::Struct; end
    class OptionalTest_Prop1 < T::Struct; end
    class OptionalTest_ReturnType < T::Struct; end
    class OrderInfo < T::Struct; end
    class OverrideClass < T::Struct; end
    class RaysData < T::Struct; end
    class Resume < T::Struct; end
    class SearchParams < T::Struct; end
    class SomeClass2 < T::Struct; end
    class TestClassAlias < T::Struct; end
    class TestClassWithEnum < T::Struct; end
    class TestOutputClass < T::Struct; end
    class UnionTest_ReturnType < T::Struct; end
    class WithReasoning < T::Struct; end

    class Blah < T::Struct
      const :prop4, T.nilable(String)
      end

    class ClassOptionalFields < T::Struct
      const :prop1, T.nilable(String)
      const :prop2, T.nilable(String)
      end

    class ClassOptionalOutput < T::Struct
      const :prop1, String
      const :prop2, String
      end

    class ClassOptionalOutput2 < T::Struct
      const :prop1, T.nilable(String)
      const :prop2, T.nilable(String)
      const :prop3, T.nilable(Baml::Types::Blah)
      end

    class DynamicPropsClass < T::Struct
      const :prop1, String
      const :prop2, String
      const :prop3, Integer
      end

    class Email < T::Struct
      const :subject, String
      const :body, String
      const :from_address, String
      end

    class Event < T::Struct
      const :title, String
      const :date, String
      const :location, String
      const :description, String
      end

    class Message < T::Struct
      const :role, String
      const :message, String
      end

    class ModifiedOutput < T::Struct
      const :reasoning, String
      const :answer, String
      end

    class NamedArgsSingleClass < T::Struct
      const :key, String
      const :key_two, T::Boolean
      const :key_three, Integer
      end

    class OptionalClass < T::Struct
      const :prop1, String
      const :prop2, String
      end

    class OptionalTest_Prop1 < T::Struct
      const :omega_a, String
      const :omega_b, Integer
      end

    class OptionalTest_ReturnType < T::Struct
      const :omega_1, T.nilable(Baml::Types::OptionalTest_Prop1)
      const :omega_2, T.nilable(String)
      const :omega_3, T::Array[T.nilable(Baml::Types::OptionalTest_CategoryType)]
      end

    class OrderInfo < T::Struct
      const :order_status, Baml::Types::OrderStatus
      const :tracking_number, T.nilable(String)
      const :estimated_arrival_date, T.nilable(String)
      end

    class OverrideClass < T::Struct
      const :prop1, String
      const :prop2, String
      end

    class RaysData < T::Struct
      const :dataType, Baml::Types::DataType
      const :value, T.any(Baml::Types::Resume, Baml::Types::Event)
      end

    class Resume < T::Struct
      const :name, String
      const :email, String
      const :phone, String
      const :experience, T::Array[String]
      const :education, T::Array[String]
      const :skills, T::Array[String]
      end

    class SearchParams < T::Struct
      const :dateRange, T.nilable(Integer)
      const :location, T::Array[String]
      const :jobTitle, T.nilable(Baml::Types::WithReasoning)
      const :company, T.nilable(Baml::Types::WithReasoning)
      const :description, T::Array[Baml::Types::WithReasoning]
      const :tags, T::Array[T.any(Baml::Types::Tag, String)]
      end

    class SomeClass2 < T::Struct
      const :prop1, String
      const :prop2, String
      end

    class TestClassAlias < T::Struct
      const :key, String
      const :key2, String
      const :key3, String
      const :key4, String
      const :key5, String
      end

    class TestClassWithEnum < T::Struct
      const :prop1, String
      const :prop2, Baml::Types::EnumInClass
      end

    class TestOutputClass < T::Struct
      const :prop1, String
      const :prop2, Integer
      end

    class UnionTest_ReturnType < T::Struct
      const :prop1, T.any(String, T::Boolean)
      const :prop2, T::Array[T.any(Float, T::Boolean)]
      const :prop3, T.any(T::Array[Float], T::Array[T::Boolean])
      end

    class WithReasoning < T::Struct
      const :value, String
      const :reasoning, String
      end
  end
end


