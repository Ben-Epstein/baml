###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ bundle add sorbet sorbet sorbet-runtime sorbet-coerce
#
###############################################################################

# This file was generated by BAML: please do not edit it.
#
# frozen_string_literal: true
# rubocop: disable
# formatter:off

require "baml"
require "sorbet-runtime"

require_relative "types"

module Baml
  class BamlClient
    extend T::Sig

    sig {params(runtime: Baml::BamlRuntime).void}
    def initialize(runtime:)
      @runtime = runtime
    end

    sig {params(path: String).returns(BamlClient)}
    def self.from_directory(path)
      BamlClient.new(runtime: BamlRuntime.from_directory(path))
    end

    sig {
      params(
        messages: T::Array[Baml::Types::Message],
      ).returns(Baml::Types::FunctionResult[T::Array[Baml::Types::Category]])
    }
    def ClassifyConversation(
        messages:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyConversation",
        args: {
          "messages" => messages,
        }
      )
      Baml::Types::FunctionResult[T::Array[Baml::Types::Category]].new(
        inner: raw,
        parsed: TypeCoerce[T::Array[Baml::Types::Category]].new.from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::FunctionResult[Baml::Types::Category])
    }
    def ClassifyMessage(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage",
        args: {
          "input" => input,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::Category].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::Category].new.from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::FunctionResult[Baml::Types::Category])
    }
    def ClassifyMessage2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage2",
        args: {
          "input" => input,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::Category].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::Category].new.from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::FunctionResult[Baml::Types::Category])
    }
    def ClassifyMessage3(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage3",
        args: {
          "input" => input,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::Category].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::Category].new.from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::FunctionResult[T::Array[String]])
    }
    def ExtractNames(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ExtractNames",
        args: {
          "input" => input,
        }
      )
      Baml::Types::FunctionResult[T::Array[String]].new(
        inner: raw,
        parsed: TypeCoerce[T::Array[String]].new.from(raw.parsed)
      )
    end

    sig {
      params(
        resume: String,
      ).returns(Baml::Types::FunctionResult[Baml::Types::Resume])
    }
    def ExtractResume(
        resume:
    )
      raw = @runtime.call_function(
        function_name: "ExtractResume",
        args: {
          "resume" => resume,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::Resume].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::Resume].new.from(raw.parsed)
      )
    end

    sig {
      params(
        resume: String,
      ).returns(Baml::Types::FunctionResult[Baml::Types::Resume])
    }
    def ExtractResume2(
        resume:
    )
      raw = @runtime.call_function(
        function_name: "ExtractResume2",
        args: {
          "resume" => resume,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::Resume].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::Resume].new.from(raw.parsed)
      )
    end

    sig {
      params(
        text: String,
      ).returns(Baml::Types::FunctionResult[Baml::Types::RaysData])
    }
    def GetDataType(
        text:
    )
      raw = @runtime.call_function(
        function_name: "GetDataType",
        args: {
          "text" => text,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::RaysData].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::RaysData].new.from(raw.parsed)
      )
    end

    sig {
      params(
        email: Baml::Types::Email,
      ).returns(Baml::Types::FunctionResult[Baml::Types::OrderInfo])
    }
    def GetOrderInfo(
        email:
    )
      raw = @runtime.call_function(
        function_name: "GetOrderInfo",
        args: {
          "email" => email,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::OrderInfo].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::OrderInfo].new.from(raw.parsed)
      )
    end

    sig {
      params(
        query: String,
      ).returns(Baml::Types::FunctionResult[Baml::Types::SearchParams])
    }
    def GetQuery(
        query:
    )
      raw = @runtime.call_function(
        function_name: "GetQuery",
        args: {
          "query" => query,
        }
      )
      Baml::Types::FunctionResult[Baml::Types::SearchParams].new(
        inner: raw,
        parsed: TypeCoerce[Baml::Types::SearchParams].new.from(raw.parsed)
      )
    end

    
  end
end


