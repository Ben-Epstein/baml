###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ bundle add sorbet-runtime sorbet-coerce sorbet-struct-comparable
#
###############################################################################

# This file was generated by BAML: please do not edit it.
#
# frozen_string_literal: true
# rubocop: disable
# formatter:off

# typed: strict
require "baml"
require "sorbet-runtime"

require_relative "types"

module Baml

  class BamlClient
    extend T::Sig

    sig { returns(UnstableBamlClient) }
    attr_reader :unstable

    sig {params(runtime: Baml::Ffi::BamlRuntime).void}
    def initialize(runtime:)
      @runtime = runtime
      @unstable = T.let(UnstableBamlClient.new(runtime: runtime), UnstableBamlClient)
    end

    sig {params(path: String).returns(BamlClient)}
    def self.from_directory(path)
      BamlClient.new(runtime: Baml::Ffi::BamlRuntime.from_directory(path))
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::Category)
    }
    def ClassifyMessage(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::Category).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::Category)
    }
    def ClassifyMessage2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::Category).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::Category)
    }
    def ClassifyMessage3(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage3",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::Category).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(T::Array[String])
    }
    def ExtractNames(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ExtractNames",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(T::Array[String]).from(raw.parsed)
    end

    sig {
      params(
        resume: String,
      ).returns(Baml::Types::Resume)
    }
    def ExtractResume(
        resume:
    )
      raw = @runtime.call_function(
        function_name: "ExtractResume",
        args: {
          "resume" => resume,
        }
      )
      Baml::convert_to(Baml::Types::Resume).from(raw.parsed)
    end

    sig {
      params(
        resume: String,
      ).returns(Baml::Types::Resume)
    }
    def ExtractResume2(
        resume:
    )
      raw = @runtime.call_function(
        function_name: "ExtractResume2",
        args: {
          "resume" => resume,
        }
      )
      Baml::convert_to(Baml::Types::Resume).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(T.nilable(Baml::Types::ClassOptionalOutput2v2))
    }
    def FnClassOptionalOutput2_V2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "FnClassOptionalOutput2_V2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(T.nilable(Baml::Types::ClassOptionalOutput2v2)).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::TestClassWithEnum2)
    }
    def FnOutputClassWithEnum_V2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "FnOutputClassWithEnum_V2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::TestClassWithEnum2).from(raw.parsed)
    end

    sig {
      params(
        text: String,
      ).returns(Baml::Types::RaysData)
    }
    def GetDataType(
        text:
    )
      raw = @runtime.call_function(
        function_name: "GetDataType",
        args: {
          "text" => text,
        }
      )
      Baml::convert_to(Baml::Types::RaysData).from(raw.parsed)
    end

    sig {
      params(
        email: Baml::Types::Email,
      ).returns(Baml::Types::OrderInfo)
    }
    def GetOrderInfo(
        email:
    )
      raw = @runtime.call_function(
        function_name: "GetOrderInfo",
        args: {
          "email" => email,
        }
      )
      Baml::convert_to(Baml::Types::OrderInfo).from(raw.parsed)
    end

    sig {
      params(
        query: String,
      ).returns(Baml::Types::SearchParams)
    }
    def GetQuery(
        query:
    )
      raw = @runtime.call_function(
        function_name: "GetQuery",
        args: {
          "query" => query,
        }
      )
      Baml::convert_to(Baml::Types::SearchParams).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(T::Array[T.nilable(Baml::Types::OptionalTest_ReturnTypev2)])
    }
    def OptionalTest_Function_V2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "OptionalTest_Function_V2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(T::Array[T.nilable(Baml::Types::OptionalTest_ReturnTypev2)]).from(raw.parsed)
    end

    sig {
      params(
        input: Baml::Types::RoundtripObject,
      ).returns(Baml::Types::RoundtripObject)
    }
    def RoundtripMyData(
        input:
    )
      raw = @runtime.call_function(
        function_name: "RoundtripMyData",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::RoundtripObject).from(raw.parsed)
    end

    sig {
      params(
        input: T.nilable(Baml::Types::OptionalClassv2),
      ).returns(String)
    }
    def V2_FnClassOptional(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnClassOptional",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        input: Baml::Types::ClassOptionalFieldsv2,
      ).returns(String)
    }
    def V2_FnClassOptional2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnClassOptional2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(T::Array[Baml::Types::EnumOutput])
    }
    def V2_FnEnumListOutput(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnEnumListOutput",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(T::Array[Baml::Types::EnumOutput]).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::EnumOutput2)
    }
    def V2_FnEnumOutput(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnEnumOutput",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::EnumOutput2).from(raw.parsed)
    end

    sig {
      params(
        myString: T.nilable(String),
      ).returns(String)
    }
    def V2_FnNamedArgsSingleStringOptional(
        myString:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnNamedArgsSingleStringOptional",
        args: {
          "myString" => myString,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(T::Boolean)
    }
    def V2_FnOutputBool(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputBool",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(T::Boolean).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Types::TestOutputClass2)
    }
    def V2_FnOutputClass(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputClass",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::TestOutputClass2).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(T::Array[Baml::Types::TestOutputClass])
    }
    def V2_FnOutputClassList(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputClassList",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(T::Array[Baml::Types::TestOutputClass]).from(raw.parsed)
    end

    sig {
      params(
        input: String,
      ).returns(T::Array[String])
    }
    def V2_FnOutputStringList(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputStringList",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(T::Array[String]).from(raw.parsed)
    end

    sig {
      params(
        input: T.nilable(String),
      ).returns(String)
    }
    def V2_FnStringOptional(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnStringOptional",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myArg: Baml::Types::NamedArgsSingleEnum2,
      ).returns(String)
    }
    def V2_FnTestNamedArgsSingleEnum(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnTestNamedArgsSingleEnum",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myBool: T::Boolean,
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleBool(
        myBool:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleBool",
        args: {
          "myBool" => myBool,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myArg: Baml::Types::NamedArgsSingleClass2,
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleClass(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleClass",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myArg: T::Array[Baml::Types::NamedArgsSingleEnumList2],
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleEnumList(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleEnumList",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myFloat: Float,
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleFloat(
        myFloat:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleFloat",
        args: {
          "myFloat" => myFloat,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myInt: Integer,
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleInt(
        myInt:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleInt",
        args: {
          "myInt" => myInt,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myString: String,
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleString(
        myString:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleString",
        args: {
          "myString" => myString,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myStringArray: T::Array[String],
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleStringArray(
        myStringArray:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleStringArray",
        args: {
          "myStringArray" => myStringArray,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        myArg: T::Array[Baml::Types::NamedArgsSingleClassList2],
      ).returns(String)
    }
    def V2_TestFnNamedArgsSingleStringList(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleStringList",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        var: String,var_with_underscores: String,
      ).returns(String)
    }
    def V2_TestFnNamedArgsSyntax(
        var:,var_with_underscores:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSyntax",
        args: {
          "var" => var,"var_with_underscores" => var_with_underscores,
        }
      )
      Baml::convert_to(String).from(raw.parsed)
    end

    sig {
      params(
        input: T.any(String, T::Boolean),
      ).returns(Baml::Types::UnionTest_ReturnTypev2)
    }
    def V2_UnionTest_Function(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_UnionTest_Function",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Baml::Types::UnionTest_ReturnTypev2).from(raw.parsed)
    end

    

  end

  class UnstableBamlClient
    extend T::Sig

    sig {params(runtime: Baml::Ffi::BamlRuntime).void}
    def initialize(runtime:)
      @runtime = runtime
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::Category])
    }
    def ClassifyMessage(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::Category].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::Category).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::Category])
    }
    def ClassifyMessage2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage2",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::Category].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::Category).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::Category])
    }
    def ClassifyMessage3(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ClassifyMessage3",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::Category].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::Category).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[T::Array[String]])
    }
    def ExtractNames(
        input:
    )
      raw = @runtime.call_function(
        function_name: "ExtractNames",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[T::Array[String]].new(
        inner: raw,
        parsed: Baml::convert_to(T::Array[String]).from(raw.parsed)
      )
    end

    sig {
      params(
        resume: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::Resume])
    }
    def ExtractResume(
        resume:
    )
      raw = @runtime.call_function(
        function_name: "ExtractResume",
        args: {
          "resume" => resume,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::Resume].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::Resume).from(raw.parsed)
      )
    end

    sig {
      params(
        resume: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::Resume])
    }
    def ExtractResume2(
        resume:
    )
      raw = @runtime.call_function(
        function_name: "ExtractResume2",
        args: {
          "resume" => resume,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::Resume].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::Resume).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[T.nilable(Baml::Types::ClassOptionalOutput2v2)])
    }
    def FnClassOptionalOutput2_V2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "FnClassOptionalOutput2_V2",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[T.nilable(Baml::Types::ClassOptionalOutput2v2)].new(
        inner: raw,
        parsed: Baml::convert_to(T.nilable(Baml::Types::ClassOptionalOutput2v2)).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::TestClassWithEnum2])
    }
    def FnOutputClassWithEnum_V2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "FnOutputClassWithEnum_V2",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::TestClassWithEnum2].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::TestClassWithEnum2).from(raw.parsed)
      )
    end

    sig {
      params(
        text: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::RaysData])
    }
    def GetDataType(
        text:
    )
      raw = @runtime.call_function(
        function_name: "GetDataType",
        args: {
          "text" => text,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::RaysData].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::RaysData).from(raw.parsed)
      )
    end

    sig {
      params(
        email: Baml::Types::Email,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::OrderInfo])
    }
    def GetOrderInfo(
        email:
    )
      raw = @runtime.call_function(
        function_name: "GetOrderInfo",
        args: {
          "email" => email,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::OrderInfo].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::OrderInfo).from(raw.parsed)
      )
    end

    sig {
      params(
        query: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::SearchParams])
    }
    def GetQuery(
        query:
    )
      raw = @runtime.call_function(
        function_name: "GetQuery",
        args: {
          "query" => query,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::SearchParams].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::SearchParams).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[T::Array[T.nilable(Baml::Types::OptionalTest_ReturnTypev2)]])
    }
    def OptionalTest_Function_V2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "OptionalTest_Function_V2",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[T::Array[T.nilable(Baml::Types::OptionalTest_ReturnTypev2)]].new(
        inner: raw,
        parsed: Baml::convert_to(T::Array[T.nilable(Baml::Types::OptionalTest_ReturnTypev2)]).from(raw.parsed)
      )
    end

    sig {
      params(
        input: Baml::Types::RoundtripObject,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::RoundtripObject])
    }
    def RoundtripMyData(
        input:
    )
      raw = @runtime.call_function(
        function_name: "RoundtripMyData",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::RoundtripObject].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::RoundtripObject).from(raw.parsed)
      )
    end

    sig {
      params(
        input: T.nilable(Baml::Types::OptionalClassv2),
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_FnClassOptional(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnClassOptional",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        input: Baml::Types::ClassOptionalFieldsv2,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_FnClassOptional2(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnClassOptional2",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[T::Array[Baml::Types::EnumOutput]])
    }
    def V2_FnEnumListOutput(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnEnumListOutput",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[T::Array[Baml::Types::EnumOutput]].new(
        inner: raw,
        parsed: Baml::convert_to(T::Array[Baml::Types::EnumOutput]).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::EnumOutput2])
    }
    def V2_FnEnumOutput(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnEnumOutput",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::EnumOutput2].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::EnumOutput2).from(raw.parsed)
      )
    end

    sig {
      params(
        myString: T.nilable(String),
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_FnNamedArgsSingleStringOptional(
        myString:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnNamedArgsSingleStringOptional",
        args: {
          "myString" => myString,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[T::Boolean])
    }
    def V2_FnOutputBool(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputBool",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[T::Boolean].new(
        inner: raw,
        parsed: Baml::convert_to(T::Boolean).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::TestOutputClass2])
    }
    def V2_FnOutputClass(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputClass",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::TestOutputClass2].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::TestOutputClass2).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[T::Array[Baml::Types::TestOutputClass]])
    }
    def V2_FnOutputClassList(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputClassList",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[T::Array[Baml::Types::TestOutputClass]].new(
        inner: raw,
        parsed: Baml::convert_to(T::Array[Baml::Types::TestOutputClass]).from(raw.parsed)
      )
    end

    sig {
      params(
        input: String,
      ).returns(Baml::Unstable::FunctionResult[T::Array[String]])
    }
    def V2_FnOutputStringList(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnOutputStringList",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[T::Array[String]].new(
        inner: raw,
        parsed: Baml::convert_to(T::Array[String]).from(raw.parsed)
      )
    end

    sig {
      params(
        input: T.nilable(String),
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_FnStringOptional(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnStringOptional",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myArg: Baml::Types::NamedArgsSingleEnum2,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_FnTestNamedArgsSingleEnum(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_FnTestNamedArgsSingleEnum",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myBool: T::Boolean,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleBool(
        myBool:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleBool",
        args: {
          "myBool" => myBool,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myArg: Baml::Types::NamedArgsSingleClass2,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleClass(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleClass",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myArg: T::Array[Baml::Types::NamedArgsSingleEnumList2],
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleEnumList(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleEnumList",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myFloat: Float,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleFloat(
        myFloat:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleFloat",
        args: {
          "myFloat" => myFloat,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myInt: Integer,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleInt(
        myInt:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleInt",
        args: {
          "myInt" => myInt,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myString: String,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleString(
        myString:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleString",
        args: {
          "myString" => myString,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myStringArray: T::Array[String],
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleStringArray(
        myStringArray:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleStringArray",
        args: {
          "myStringArray" => myStringArray,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        myArg: T::Array[Baml::Types::NamedArgsSingleClassList2],
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSingleStringList(
        myArg:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleStringList",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        var: String,var_with_underscores: String,
      ).returns(Baml::Unstable::FunctionResult[String])
    }
    def V2_TestFnNamedArgsSyntax(
        var:,var_with_underscores:
    )
      raw = @runtime.call_function(
        function_name: "V2_TestFnNamedArgsSyntax",
        args: {
          "var" => var,"var_with_underscores" => var_with_underscores,
        }
      )
      Baml::Unstable::FunctionResult[String].new(
        inner: raw,
        parsed: Baml::convert_to(String).from(raw.parsed)
      )
    end

    sig {
      params(
        input: T.any(String, T::Boolean),
      ).returns(Baml::Unstable::FunctionResult[Baml::Types::UnionTest_ReturnTypev2])
    }
    def V2_UnionTest_Function(
        input:
    )
      raw = @runtime.call_function(
        function_name: "V2_UnionTest_Function",
        args: {
          "input" => input,
        }
      )
      Baml::Unstable::FunctionResult[Baml::Types::UnionTest_ReturnTypev2].new(
        inner: raw,
        parsed: Baml::convert_to(Baml::Types::UnionTest_ReturnTypev2).from(raw.parsed)
      )
    end

    
  end
end


