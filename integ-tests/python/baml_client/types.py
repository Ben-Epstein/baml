###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from pydantic import BaseModel, Enum
from typing import List, Optional, Union
class Category(str, Enum):
    Refund = "Refund"
    CancelOrder = "CancelOrder"
    TechnicalSupport = "TechnicalSupport"
    AccountIssue = "AccountIssue"
    Question = "Question"

class Category2(str, Enum):
    Refund = "Refund"
    CancelOrder = "CancelOrder"
    TechnicalSupport = "TechnicalSupport"
    AccountIssue = "AccountIssue"
    Question = "Question"

class Category3(str, Enum):
    Refund = "Refund"
    CancelOrder = "CancelOrder"
    TechnicalSupport = "TechnicalSupport"
    AccountIssue = "AccountIssue"
    Question = "Question"

class DataType(str, Enum):
    Resume = "Resume"
    Event = "Event"

class EnumInClass(str, Enum):
    ONE = "ONE"
    TWO = "TWO"

class EnumInClass2(str, Enum):
    ONE = "ONE"
    TWO = "TWO"

class EnumOutput(str, Enum):
    ONE = "ONE"
    TWO = "TWO"
    THREE = "THREE"

class EnumOutput2(str, Enum):
    ONE = "ONE"
    TWO = "TWO"
    THREE = "THREE"

class NamedArgsSingleEnum(str, Enum):
    ONE = "ONE"
    TWO = "TWO"

class NamedArgsSingleEnum2(str, Enum):
    ONE = "ONE"
    TWO = "TWO"

class NamedArgsSingleEnumList(str, Enum):
    ONE = "ONE"
    TWO = "TWO"

class NamedArgsSingleEnumList2(str, Enum):
    ONE = "ONE"
    TWO = "TWO"

class OptionalTest_CategoryType(str, Enum):
    Aleph = "Aleph"
    Beta = "Beta"
    Gamma = "Gamma"

class OptionalTest_CategoryTypev2(str, Enum):
    Aleph = "Aleph"
    Beta = "Beta"
    Gamma = "Gamma"

class OrderStatus(str, Enum):
    ORDERED = "ORDERED"
    SHIPPED = "SHIPPED"
    DELIVERED = "DELIVERED"
    CANCELLED = "CANCELLED"

class OverrideEnum(str, Enum):
    ONE = "ONE"
    TWO = "TWO"

class Tag(str, Enum):
    Security = "Security"
    AI = "AI"
    Blockchain = "Blockchain"

class TestEnum(str, Enum):
    A = "A"
    B = "B"
    C = "C"
    D = "D"
    E = "E"
    F = "F"
    G = "G"

class Blah(BaseModel):
    prop4: Optional[string]

class Blah2(BaseModel):
    prop4: Optional[string]

class ClassOptionalFields(BaseModel):
    prop1: Optional[string]
    prop2: Optional[string]

class ClassOptionalFieldsv2(BaseModel):
    prop1: Optional[string]
    prop2: Optional[string]

class ClassOptionalOutput(BaseModel):
    prop1: string
    prop2: string

class ClassOptionalOutput2(BaseModel):
    prop1: Optional[string]
    prop2: Optional[string]
    prop3: Optional["Blah"]

class ClassOptionalOutput2v2(BaseModel):
    prop1: Optional[string]
    prop2: Optional[string]
    prop3: Optional["Blah2"]

class DynamicPropsClass(BaseModel):
    prop1: string
    prop2: string
    prop3: number

class Email(BaseModel):
    subject: string
    body: string
    from_address: string

class Event(BaseModel):
    title: string
    date: string
    location: string
    description: string

class ModifiedOutput(BaseModel):
    reasoning: string
    answer: string

class NamedArgsSingleClass(BaseModel):
    key: string
    key_two: boolean
    key_three: number

class NamedArgsSingleClass2(BaseModel):
    key: string
    key_two: boolean
    key_three: number

class NamedArgsSingleClassList2(BaseModel):
    key: string
    key_two: boolean
    key_three: number

class OptionalClass(BaseModel):
    prop1: string
    prop2: string

class OptionalClassv2(BaseModel):
    prop1: string
    prop2: string

class OptionalTest_Prop1(BaseModel):
    omega_a: string
    omega_b: number

class OptionalTest_Prop1v2(BaseModel):
    omega_a: string
    omega_b: number

class OptionalTest_ReturnType(BaseModel):
    omega_1: Optional["OptionalTest_Prop1"]
    omega_2: Optional[string]
    omega_3: List[Optional["OptionalTest_CategoryType"]]

class OptionalTest_ReturnTypev2(BaseModel):
    omega_1: Optional["OptionalTest_Prop1v2"]
    omega_2: Optional[string]
    omega_3: List[Optional["OptionalTest_CategoryTypev2"]]

class OrderInfo(BaseModel):
    order_status: "OrderStatus"
    tracking_number: Optional[string]
    estimated_arrival_date: Optional[string]

class OverrideClass(BaseModel):
    prop1: string
    prop2: string

class RaysData(BaseModel):
    dataType: "DataType"
    value: Union["Resume", "Event"]

class Resume(BaseModel):
    name: string
    email: string
    phone: string
    experience: List[string]
    education: List[string]
    skills: List[string]

class SearchParams(BaseModel):
    dateRange: Optional[number]
    location: List[string]
    jobTitle: Optional["WithReasoning"]
    company: Optional["WithReasoning"]
    description: List["WithReasoning"]
    tags: List[Union["Tag", string]]

class SomeClass2(BaseModel):
    prop1: string
    prop2: string

class TestClassAlias(BaseModel):
    key: string
    key2: string
    key3: string
    key4: string
    key5: string

class TestClassWithEnum(BaseModel):
    prop1: string
    prop2: "EnumInClass"

class TestClassWithEnum2(BaseModel):
    prop1: string
    prop2: "EnumInClass"

class TestOutputClass(BaseModel):
    prop1: string
    prop2: number

class TestOutputClass2(BaseModel):
    prop1: string
    prop2: number

class UnionTest_ReturnType(BaseModel):
    prop1: Union[string, boolean]
    prop2: List[Union[number, boolean]]
    prop3: Union[List[number], List[boolean]]

class UnionTest_ReturnTypev2(BaseModel):
    prop1: Union[string, boolean]
    prop2: List[Union[number, boolean]]
    prop3: Union[List[number], List[boolean]]

class WithReasoning(BaseModel):
    value: string
    reasoning: string
