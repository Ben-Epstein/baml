# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from baml_core.stream import AsyncStream
from baml_lib._impl.functions import BaseBAMLFunction
from typing import AsyncIterator, Callable, Protocol, runtime_checkable


IDescribeImageOutput = str

@runtime_checkable
class IDescribeImage(Protocol):
    """
    This is the interface for a function.

    Args:
        img: Image

    Returns:
        str
    """

    async def __call__(self, *, img: Image) -> str:
        ...

   

@runtime_checkable
class IDescribeImageStream(Protocol):
    """
    This is the interface for a stream function.

    Args:
        img: Image

    Returns:
        AsyncStream[str, str]
    """

    def __call__(self, *, img: Image
) -> AsyncStream[str, str]:
        ...
class IBAMLDescribeImage(BaseBAMLFunction[str, str]):
    def __init__(self) -> None:
        super().__init__(
            "DescribeImage",
            IDescribeImage,
            ["default_config"],
        )

    async def __call__(self, *args, **kwargs) -> str:
        return await self.get_impl("default_config").run(*args, **kwargs)
    
    def stream(self, *args, **kwargs) -> AsyncStream[str, str]:
        res = self.get_impl("default_config").stream(*args, **kwargs)
        return res

BAMLDescribeImage = IBAMLDescribeImage()

__all__ = [ "BAMLDescribeImage" ]
