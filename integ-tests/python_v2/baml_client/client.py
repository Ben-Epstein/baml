###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import "baml"
from . import types

class BamlClient
    @staticmethod
    def from_directory(path):
      new BamlClient(runtime=BamlRuntime.from_directory(path))

    def __init__(self, runtime):
      self.__runtime = runtime

    def ClassifyMessage(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "ClassifyMessage",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to("Category").from(raw.parsed)

    def ClassifyMessage2(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "ClassifyMessage2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to("Category").from(raw.parsed)

    def ClassifyMessage3(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "ClassifyMessage3",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to("Category").from(raw.parsed)

    def ExtractNames(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "ExtractNames",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(List[string]).from(raw.parsed)

    def ExtractResume(
        self,
        resume: string
    )
      raw = self.__runtime.call_function(
        function_name: "ExtractResume",
        args: {
          "resume" => resume,
        }
      )
      Baml::convert_to("Resume").from(raw.parsed)

    def ExtractResume2(
        self,
        resume: string
    )
      raw = self.__runtime.call_function(
        function_name: "ExtractResume2",
        args: {
          "resume" => resume,
        }
      )
      Baml::convert_to("Resume").from(raw.parsed)

    def FnClassOptionalOutput2_V2(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "FnClassOptionalOutput2_V2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(Optional["ClassOptionalOutput2v2"]).from(raw.parsed)

    def FnOutputClassWithEnum_V2(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "FnOutputClassWithEnum_V2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to("TestClassWithEnum2").from(raw.parsed)

    def GetDataType(
        self,
        text: string
    )
      raw = self.__runtime.call_function(
        function_name: "GetDataType",
        args: {
          "text" => text,
        }
      )
      Baml::convert_to("RaysData").from(raw.parsed)

    def GetOrderInfo(
        self,
        email: "Email"
    )
      raw = self.__runtime.call_function(
        function_name: "GetOrderInfo",
        args: {
          "email" => email,
        }
      )
      Baml::convert_to("OrderInfo").from(raw.parsed)

    def GetQuery(
        self,
        query: string
    )
      raw = self.__runtime.call_function(
        function_name: "GetQuery",
        args: {
          "query" => query,
        }
      )
      Baml::convert_to("SearchParams").from(raw.parsed)

    def OptionalTest_Function_V2(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "OptionalTest_Function_V2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(List[Optional["OptionalTest_ReturnTypev2"]]).from(raw.parsed)

    def V2_FnClassOptional(
        self,
        input: Optional["OptionalClassv2"]
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnClassOptional",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_FnClassOptional2(
        self,
        input: "ClassOptionalFieldsv2"
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnClassOptional2",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_FnEnumListOutput(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnEnumListOutput",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(List["EnumOutput"]).from(raw.parsed)

    def V2_FnEnumOutput(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnEnumOutput",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to("EnumOutput2").from(raw.parsed)

    def V2_FnNamedArgsSingleStringOptional(
        self,
        myString: Optional[string]
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnNamedArgsSingleStringOptional",
        args: {
          "myString" => myString,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_FnOutputBool(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnOutputBool",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(boolean).from(raw.parsed)

    def V2_FnOutputClass(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnOutputClass",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to("TestOutputClass2").from(raw.parsed)

    def V2_FnOutputClassList(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnOutputClassList",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(List["TestOutputClass"]).from(raw.parsed)

    def V2_FnOutputStringList(
        self,
        input: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnOutputStringList",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(List[string]).from(raw.parsed)

    def V2_FnStringOptional(
        self,
        input: Optional[string]
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnStringOptional",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_FnTestNamedArgsSingleEnum(
        self,
        myArg: "NamedArgsSingleEnum2"
    )
      raw = self.__runtime.call_function(
        function_name: "V2_FnTestNamedArgsSingleEnum",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleBool(
        self,
        myBool: boolean
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleBool",
        args: {
          "myBool" => myBool,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleClass(
        self,
        myArg: "NamedArgsSingleClass2"
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleClass",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleEnumList(
        self,
        myArg: List["NamedArgsSingleEnumList2"]
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleEnumList",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleFloat(
        self,
        myFloat: number
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleFloat",
        args: {
          "myFloat" => myFloat,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleInt(
        self,
        myInt: number
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleInt",
        args: {
          "myInt" => myInt,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleString(
        self,
        myString: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleString",
        args: {
          "myString" => myString,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleStringArray(
        self,
        myStringArray: List[string]
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleStringArray",
        args: {
          "myStringArray" => myStringArray,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSingleStringList(
        self,
        myArg: List["NamedArgsSingleClassList2"]
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSingleStringList",
        args: {
          "myArg" => myArg,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_TestFnNamedArgsSyntax(
        self,
        var: string,var_with_underscores: string
    )
      raw = self.__runtime.call_function(
        function_name: "V2_TestFnNamedArgsSyntax",
        args: {
          "var" => var,"var_with_underscores" => var_with_underscores,
        }
      )
      Baml::convert_to(string).from(raw.parsed)

    def V2_UnionTest_Function(
        self,
        input: Union[string, boolean]
    )
      raw = self.__runtime.call_function(
        function_name: "V2_UnionTest_Function",
        args: {
          "input" => input,
        }
      )
      Baml::convert_to("UnionTest_ReturnTypev2").from(raw.parsed)

    