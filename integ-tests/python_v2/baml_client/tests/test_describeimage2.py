# This file is generated by the BAML compiler.
# Do not edit this file directly.
# Instead, edit the BAML files and recompile.

# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

from ..__do_not_import.generated_baml_client import baml
from ..baml_types import ClassWithImage, FakeImage, IDescribeImage2, IDescribeImage2Stream
from baml_lib._impl.deserializer import Deserializer
from json import dumps
from pytest_baml.ipc_channel import BaseIPCChannel
from typing import Any


@baml.DescribeImage2.test(stream=True)
async def test_test1(DescribeImage2Impl: IDescribeImage2Stream, baml_ipc_channel: BaseIPCChannel):
    def to_str(item: Any) -> str:
        if isinstance(item, str):
            return item
        return dumps(item)

    case = {""classWithImage"": {""myImage"": {""url"": "https://i.kym-cdn.com/photos/images/original/002/807/304/a0b.jpeg", }, ""param2"": "ocean", }, ""img2"": {""url"": "https://i.kym-cdn.com/entries/icons/original/000/033/100/eht0m1qg8dk21.jpg", }, }
    deserializer_classWithImage = Deserializer[ClassWithImage](ClassWithImage) # type: ignore
    classWithImage = deserializer_classWithImage.from_string(to_str(case["classWithImage"]))
    deserializer_img2 = Deserializer[Image](Image) # type: ignore
    img2 = deserializer_img2.from_string(to_str(case["img2"]))
    async with DescribeImage2Impl(
        classWithImage=classWithImage,
        img2=img2
    ) as stream:
        async for response in stream.parsed_stream:
            baml_ipc_channel.send("partial_response", response.json())

        await stream.get_final_response()
