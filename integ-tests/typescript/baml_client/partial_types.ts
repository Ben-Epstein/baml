/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { Image } from "@boundaryml/baml"

import * from "./types"

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

export interface StreamState<T>:
    value: T
    completion_state: "Pending" | "Incomplete" | "Complete"


export interface BigNumbers {
    a?: (number | null)
    b?: (number | null)
}

export interface BinaryNode {
    data?: (number | null)
    left: (BinaryNode | null | null)
    right: (BinaryNode | null | null)
}

export interface Blah {
    prop4: ((string | null) | null)
}

export interface BlockConstraint {
    foo?: (number | null)
    bar?: (string | null)
}

export interface BlockConstraintForParam {
    bcfp?: (number | null)
    bcfp2?: (string | null)
}

export interface BookOrder {
    orderId?: (string | null)
    title?: (string | null)
    quantity?: (number | null)
    price?: (number | null)
}

export interface ClassOptionalOutput {
    prop1?: (string | null)
    prop2?: (string | null)
}

export interface ClassOptionalOutput2 {
    prop1: ((string | null) | null)
    prop2: ((string | null) | null)
    prop3: (Blah | null | null)
}

export interface ClassWithBlockDone {
    i_16_digits?: (number | null)
    s_20_words?: (string | null)
}

export interface ClassWithDone {
    sixteen_digit_number?: (number | null)
    string_with_twenty_words: string
    class_1: types.ClassWithoutDone
    class_2?: types.ClassWithBlockDone | null
    class_done_needed: types.ClassWithBlockDone
    class_needed: ClassWithoutDone
}

export interface ClassWithImage {
    myImage?: (Image | null)
    param2?: (string | null)
    fake_image?: FakeImage | null
}

export interface ClassWithoutDone {
    i_16_digits?: (number | null)
    s_20_words?: (string | null)
}

export interface CompoundBigNumbers {
    big?: BigNumbers | null
    big_nums?: BigNumbers | null[]
    another?: BigNumbers | null
}

export interface ContactInfo {
    primary?: (PhoneNumber | null | EmailAddress | null | null)
    secondary?: (PhoneNumber | null | EmailAddress | null | (null | null) | null)
}

export interface CustomTaskResult {
    bookOrder?: (BookOrder | null | ((null | null) | null) | null)
    flightConfirmation?: (FlightConfirmation | null | ((null | null) | null) | null)
    groceryReceipt?: (GroceryReceipt | null | ((null | null) | null) | null)
}

export interface DummyOutput {
    nonce?: (string | null)
    nonce2?: (string | null)
    [key: string]: any;
}

export interface DynInputOutput {
    testKey?: (string | null)
    [key: string]: any;
}

export interface DynamicClassOne {
    [key: string]: any;
}

export interface DynamicClassTwo {
    hi?: (string | null)
    some_class?: SomeClassNestedDynamic | null
    status?: (string | DynEnumOne | null)
    [key: string]: any;
}

export interface DynamicOutput {
    [key: string]: any;
}

export interface Earthling {
    age?: Checked<(number | null),"earth_aged" | "no_infants"
}

export interface Education {
    institution?: (string | null)
    location?: (string | null)
    degree?: (string | null)
    major?: (string | null)[]
    graduation_date: ((string | null) | null)
}

export interface Email {
    subject?: (string | null)
    body?: (string | null)
    from_address?: (string | null)
}

export interface EmailAddress {
    value?: (string | null)
}

export interface Event {
    title?: (string | null)
    date?: (string | null)
    location?: (string | null)
    description?: (string | null)
}

export interface FakeImage {
    url?: (string | null)
}

export interface FlightConfirmation {
    confirmationNumber?: (string | null)
    flightNumber?: (string | null)
    departureTime?: (string | null)
    arrivalTime?: (string | null)
    seatNumber?: (string | null)
}

export interface FooAny {
    planetary_age?: (Martian | null | Earthling | null | null)
    certainty?: Checked<(number | null),"unreasonably_certain"
    species?: Checked<(string | null),"regex_bad" | "regex_good" | "trivial"
}

export interface Forest {
    trees?: Tree | null[]
}

export interface GroceryReceipt {
    receiptId?: (string | null)
    storeName?: (string | null)
    items?: ((string | null) | (number | null) | (number | null) | null)[]
    totalAmount?: (number | null)
}

export interface InnerClass {
    prop1?: (string | null)
    prop2?: (string | null)
    inner?: InnerClass2 | null
}

export interface InnerClass2 {
    prop2?: (number | null)
    prop3?: (number | null)
}

export interface InputClass {
    key?: (string | null)
    key2?: (string | null)
}

export interface InputClassNested {
    key?: (string | null)
    nested?: InputClass | null
}

export interface LinkedList {
    head: (Node | null | null)
    len?: (number | null)
}

export interface LiteralClassHello {
    prop?: "hello"?
}

export interface LiteralClassOne {
    prop?: "one"?
}

export interface LiteralClassTwo {
    prop?: "two"?
}

export interface MalformedConstraints {
    foo?: Checked<(number | null),"foo_check"
}

export interface MalformedConstraints2 {
    foo?: (number | null)
}

/**
 * A Martian organism with an age.
 * Such a nice type.
 */
export interface Martian {
    /**
   * The age of the Martian in Mars years.
   * So many Mars years.
   */
    age?: Checked<(number | null),"young_enough"
}

export interface NamedArgsSingleClass {
    key?: (string | null)
    key_two?: (boolean | null)
    key_three?: (number | null)
}

export interface Nested {
    prop3?: ((string | null) | ((null | null) | null) | null)
    prop4?: ((string | null) | ((null | null) | null) | null)
    prop20?: Nested2 | null
}

export interface Nested2 {
    prop11?: ((string | null) | ((null | null) | null) | null)
    prop12?: ((string | null) | ((null | null) | null) | null)
}

export interface NestedBlockConstraint {
    nbc?: Checked<BlockConstraint | null,"cross_field"
}

export interface NestedBlockConstraintForParam {
    nbcfp?: BlockConstraintForParam | null
}

export interface Node {
    data?: (number | null)
    next: (Node | null | null)
}

export interface OptionalTest_Prop1 {
    omega_a?: (string | null)
    omega_b?: (number | null)
}

export interface OptionalTest_ReturnType {
    omega_1: (OptionalTest_Prop1 | null | null)
    omega_2: ((string | null) | null)
    omega_3?: ((OptionalTest_CategoryType | null | null)[]
}

export interface OrderInfo {
    order_status?: (OrderStatus | null
    tracking_number: ((string | null) | null)
    estimated_arrival_date: ((string | null) | null)
}

export interface OriginalA {
    value?: (number | null)
}

export interface OriginalB {
    value?: (number | null)
    [key: string]: any;
}

export interface Person {
    name: ((string | null) | null)
    hair_color: ((string | Color | null) | null)
    [key: string]: any;
}

export interface PhoneNumber {
    value?: (string | null)
}

export interface Quantity {
    amount?: ((number | null) | (number | null) | null)
    unit: ((string | null) | null)
}

export interface RaysData {
    dataType?: (DataType | null
    value?: (Resume | null | Event | null | null)
}

export interface ReceiptInfo {
    items?: ReceiptItem | null[]
    total_cost: ((number | null) | null)
    venue?: ("barisa"? | "ox_burger"? | null)
}

export interface ReceiptItem {
    name?: (string | null)
    description: ((string | null) | null)
    quantity?: (number | null)
    price?: (number | null)
}

export interface Recipe {
    ingredients?: (Record<string, Quantity | null> | null)
    recipe_type?: ("breakfast"? | "dinner"? | null)
}

export interface Resume {
    name?: (string | null)
    email?: (string | null)
    phone?: (string | null)
    experience?: Education | null[]
    education?: (string | null)[]
    skills?: (string | null)[]
}

export interface Schema {
    prop1?: ((string | null) | ((null | null) | null) | null)
    prop2?: (Nested | null | (string | null) | null)
    prop5?: ((string | null) | ((null | null) | null) | null)[]
    prop6?: ((string | null) | Nested | null[] | null)
    nested_attrs?: ((string | null) | ((null | null) | null) | Nested | null | null)[]
    parens?: ((string | null) | ((null | null) | null) | null)
    other_group?: ((string | null) | ((number | null) | (string | null) | null) | null)
}

export interface SearchParams {
    dateRange: ((number | null) | null)
    location?: (string | null)[]
    jobTitle: (WithReasoning | null | null)
    company: (WithReasoning | null | null)
    description?: WithReasoning | null[]
    tags?: ((Tag | null | (string | null) | null)[]
}

export interface SomeClassNestedDynamic {
    hi?: (string | null)
    [key: string]: any;
}

export interface StringToClassEntry {
    word?: (string | null)
}

export interface TestClassAlias {
    key?: (string | null)
    key2?: (string | null)
    key3?: (string | null)
    key4?: (string | null)
    key5?: (string | null)
}

export interface TestClassNested {
    prop1?: (string | null)
    prop2?: InnerClass | null
}

export interface TestClassWithEnum {
    prop1?: (string | null)
    prop2?: (EnumInClass | null
}

export interface TestOutputClass {
    prop1: string
    prop2?: StreamState<(number | null)>
}

export interface Tree {
    data?: (number | null)
    children?: Forest | null
}

export interface TwoStoriesOneTitle {
    title?: (string | null)
    story_a?: (string | null)
    story_b?: (string | null)
}

export interface UnionTest_ReturnType {
    prop1?: ((string | null) | (boolean | null) | null)
    prop2?: ((number | null) | (boolean | null) | null)[]
    prop3?: ((boolean | null)[] | (number | null)[] | null)
}

export interface WithReasoning {
    value?: (string | null)
    reasoning?: (string | null)
}
