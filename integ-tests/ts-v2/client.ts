/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install baml_ts
$ yarn add baml_ts
$ pnpm add baml_ts

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
/* eslint-disable */
import baml_ts from "baml-ts"
import types from "./types"

const type_cast = <O>(input: baml_ts.ParsedType): O => {
  throw Error('unimplemented')
};

export class BamlClient {
  private _runtime: baml_ts.BamlRuntimeFfi
  private _unstableClient: BamlUnstableClient
  private _streamClient: BamlStreamClient

  static from_directory(path: string): BamlClient {
    return new BamlClient(baml_ts.BamlRuntimeFfi.from_directory(path))
  }

  constructor(private _runtime: baml_ts.BamlRuntimeFfi) {
    this._unstableClient = new UnstableBamlClient(this._runtime)
    this._streamClient = new BamlStreamClient(this._runtime)
  }

  get unstable(): UnstableBamlClient { return this._unstableClient; }
  get stream(): BamlStreamClient { return this._streamClient; }


  ClassifyMessage = async (args: {
    input: string,
  }): Category => {
    const raw = this._runtime.call_function("ClassifyMessage", args, {})
    return type_cast<Category>(raw.parsed)
  }

  ClassifyMessage2 = async (args: {
    input: string,
  }): Category => {
    const raw = this._runtime.call_function("ClassifyMessage2", args, {})
    return type_cast<Category>(raw.parsed)
  }

  ClassifyMessage3 = async (args: {
    input: string,
  }): Category => {
    const raw = this._runtime.call_function("ClassifyMessage3", args, {})
    return type_cast<Category>(raw.parsed)
  }

  DescribeImage = async (args: {
    img: baml_ts.Image,
  }): string => {
    const raw = this._runtime.call_function("DescribeImage", args, {})
    return type_cast<string>(raw.parsed)
  }

  DescribeImage2 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string => {
    const raw = this._runtime.call_function("DescribeImage2", args, {})
    return type_cast<string>(raw.parsed)
  }

  DescribeImage3 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string => {
    const raw = this._runtime.call_function("DescribeImage3", args, {})
    return type_cast<string>(raw.parsed)
  }

  DescribeImage4 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string => {
    const raw = this._runtime.call_function("DescribeImage4", args, {})
    return type_cast<string>(raw.parsed)
  }

  ExtractNames = async (args: {
    input: string,
  }): string[] => {
    const raw = this._runtime.call_function("ExtractNames", args, {})
    return type_cast<string[]>(raw.parsed)
  }

  ExtractResume = async (args: {
    resume: string,
  }): Resume => {
    const raw = this._runtime.call_function("ExtractResume", args, {})
    return type_cast<Resume>(raw.parsed)
  }

  ExtractResume2 = async (args: {
    resume: string,
  }): Resume => {
    const raw = this._runtime.call_function("ExtractResume2", args, {})
    return type_cast<Resume>(raw.parsed)
  }

  FnClassOptionalOutput2_V2 = async (args: {
    input: string,
  }): ClassOptionalOutput2v2 | null => {
    const raw = this._runtime.call_function("FnClassOptionalOutput2_V2", args, {})
    return type_cast<ClassOptionalOutput2v2 | null>(raw.parsed)
  }

  FnOutputClassWithEnum_V2 = async (args: {
    input: string,
  }): TestClassWithEnum2 => {
    const raw = this._runtime.call_function("FnOutputClassWithEnum_V2", args, {})
    return type_cast<TestClassWithEnum2>(raw.parsed)
  }

  GetDataType = async (args: {
    text: string,
  }): RaysData => {
    const raw = this._runtime.call_function("GetDataType", args, {})
    return type_cast<RaysData>(raw.parsed)
  }

  GetOrderInfo = async (args: {
    email: Email,
  }): OrderInfo => {
    const raw = this._runtime.call_function("GetOrderInfo", args, {})
    return type_cast<OrderInfo>(raw.parsed)
  }

  GetQuery = async (args: {
    query: string,
  }): SearchParams => {
    const raw = this._runtime.call_function("GetQuery", args, {})
    return type_cast<SearchParams>(raw.parsed)
  }

  OptionalTest_Function_V2 = async (args: {
    input: string,
  }): (OptionalTest_ReturnTypev2 | null)[] => {
    const raw = this._runtime.call_function("OptionalTest_Function_V2", args, {})
    return type_cast<(OptionalTest_ReturnTypev2 | null)[]>(raw.parsed)
  }

  V2_FnClassOptional = async (args: {
    input: OptionalClassv2 | null,
  }): string => {
    const raw = this._runtime.call_function("V2_FnClassOptional", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_FnClassOptional2 = async (args: {
    input: ClassOptionalFieldsv2,
  }): string => {
    const raw = this._runtime.call_function("V2_FnClassOptional2", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_FnEnumListOutput = async (args: {
    input: string,
  }): EnumOutput[] => {
    const raw = this._runtime.call_function("V2_FnEnumListOutput", args, {})
    return type_cast<EnumOutput[]>(raw.parsed)
  }

  V2_FnEnumOutput = async (args: {
    input: string,
  }): EnumOutput2 => {
    const raw = this._runtime.call_function("V2_FnEnumOutput", args, {})
    return type_cast<EnumOutput2>(raw.parsed)
  }

  V2_FnNamedArgsSingleStringOptional = async (args: {
    myString: string | null,
  }): string => {
    const raw = this._runtime.call_function("V2_FnNamedArgsSingleStringOptional", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_FnOutputBool = async (args: {
    input: string,
  }): boolean => {
    const raw = this._runtime.call_function("V2_FnOutputBool", args, {})
    return type_cast<boolean>(raw.parsed)
  }

  V2_FnOutputClass = async (args: {
    input: string,
  }): TestOutputClass2 => {
    const raw = this._runtime.call_function("V2_FnOutputClass", args, {})
    return type_cast<TestOutputClass2>(raw.parsed)
  }

  V2_FnOutputClassList = async (args: {
    input: string,
  }): TestOutputClass[] => {
    const raw = this._runtime.call_function("V2_FnOutputClassList", args, {})
    return type_cast<TestOutputClass[]>(raw.parsed)
  }

  V2_FnOutputStringList = async (args: {
    input: string,
  }): string[] => {
    const raw = this._runtime.call_function("V2_FnOutputStringList", args, {})
    return type_cast<string[]>(raw.parsed)
  }

  V2_FnStringOptional = async (args: {
    input: string | null,
  }): string => {
    const raw = this._runtime.call_function("V2_FnStringOptional", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_FnTestNamedArgsSingleEnum = async (args: {
    myArg: NamedArgsSingleEnum2,
  }): string => {
    const raw = this._runtime.call_function("V2_FnTestNamedArgsSingleEnum", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleBool = async (args: {
    myBool: boolean,
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleBool", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleClass = async (args: {
    myArg: NamedArgsSingleClass2,
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleClass", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleEnumList = async (args: {
    myArg: NamedArgsSingleEnumList2[],
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleEnumList", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleFloat = async (args: {
    myFloat: number,
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleFloat", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleInt = async (args: {
    myInt: number,
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleInt", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleString = async (args: {
    myString: string,
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleString", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleStringArray = async (args: {
    myStringArray: string[],
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleStringArray", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSingleStringList = async (args: {
    myArg: NamedArgsSingleClassList2[],
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSingleStringList", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_TestFnNamedArgsSyntax = async (args: {
    var: string,
    var_with_underscores: string,
  }): string => {
    const raw = this._runtime.call_function("V2_TestFnNamedArgsSyntax", args, {})
    return type_cast<string>(raw.parsed)
  }

  V2_UnionTest_Function = async (args: {
    input: string | boolean,
  }): UnionTest_ReturnTypev2 | DataType => {
    const raw = this._runtime.call_function("V2_UnionTest_Function", args, {})
    return type_cast<UnionTest_ReturnTypev2 | DataType>(raw.parsed)
  }

}

export class BamlUnstableClient {
  constructor(private _runtime: baml_ts.BamlRuntimeFfi) {}


  ClassifyMessage = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("ClassifyMessage", args, {})
  }

  ClassifyMessage2 = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("ClassifyMessage2", args, {})
  }

  ClassifyMessage3 = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("ClassifyMessage3", args, {})
  }

  DescribeImage = async (args: {
    img: baml_ts.Image,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("DescribeImage", args, {})
  }

  DescribeImage2 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("DescribeImage2", args, {})
  }

  DescribeImage3 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("DescribeImage3", args, {})
  }

  DescribeImage4 = async (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("DescribeImage4", args, {})
  }

  ExtractNames = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("ExtractNames", args, {})
  }

  ExtractResume = async (args: {
    resume: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("ExtractResume", args, {})
  }

  ExtractResume2 = async (args: {
    resume: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("ExtractResume2", args, {})
  }

  FnClassOptionalOutput2_V2 = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("FnClassOptionalOutput2_V2", args, {})
  }

  FnOutputClassWithEnum_V2 = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("FnOutputClassWithEnum_V2", args, {})
  }

  GetDataType = async (args: {
    text: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("GetDataType", args, {})
  }

  GetOrderInfo = async (args: {
    email: Email,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("GetOrderInfo", args, {})
  }

  GetQuery = async (args: {
    query: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("GetQuery", args, {})
  }

  OptionalTest_Function_V2 = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("OptionalTest_Function_V2", args, {})
  }

  V2_FnClassOptional = async (args: {
    input: OptionalClassv2 | null,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnClassOptional", args, {})
  }

  V2_FnClassOptional2 = async (args: {
    input: ClassOptionalFieldsv2,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnClassOptional2", args, {})
  }

  V2_FnEnumListOutput = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnEnumListOutput", args, {})
  }

  V2_FnEnumOutput = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnEnumOutput", args, {})
  }

  V2_FnNamedArgsSingleStringOptional = async (args: {
    myString: string | null,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnNamedArgsSingleStringOptional", args, {})
  }

  V2_FnOutputBool = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnOutputBool", args, {})
  }

  V2_FnOutputClass = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnOutputClass", args, {})
  }

  V2_FnOutputClassList = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnOutputClassList", args, {})
  }

  V2_FnOutputStringList = async (args: {
    input: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnOutputStringList", args, {})
  }

  V2_FnStringOptional = async (args: {
    input: string | null,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnStringOptional", args, {})
  }

  V2_FnTestNamedArgsSingleEnum = async (args: {
    myArg: NamedArgsSingleEnum2,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_FnTestNamedArgsSingleEnum", args, {})
  }

  V2_TestFnNamedArgsSingleBool = async (args: {
    myBool: boolean,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleBool", args, {})
  }

  V2_TestFnNamedArgsSingleClass = async (args: {
    myArg: NamedArgsSingleClass2,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleClass", args, {})
  }

  V2_TestFnNamedArgsSingleEnumList = async (args: {
    myArg: NamedArgsSingleEnumList2[],
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleEnumList", args, {})
  }

  V2_TestFnNamedArgsSingleFloat = async (args: {
    myFloat: number,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleFloat", args, {})
  }

  V2_TestFnNamedArgsSingleInt = async (args: {
    myInt: number,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleInt", args, {})
  }

  V2_TestFnNamedArgsSingleString = async (args: {
    myString: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleString", args, {})
  }

  V2_TestFnNamedArgsSingleStringArray = async (args: {
    myStringArray: string[],
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleStringArray", args, {})
  }

  V2_TestFnNamedArgsSingleStringList = async (args: {
    myArg: NamedArgsSingleClassList2[],
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSingleStringList", args, {})
  }

  V2_TestFnNamedArgsSyntax = async (args: {
    var: string,
    var_with_underscores: string,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_TestFnNamedArgsSyntax", args, {})
  }

  V2_UnionTest_Function = async (args: {
    input: string | boolean,
  }): baml_ts.FunctionResult => {
    return this._runtime.call_function("V2_UnionTest_Function", args, {})
  }

}

export class BamlStreamClient {
  constructor(private _runtime: baml_ts.BamlRuntimeFfi) {}


  ClassifyMessage = async function* (args: {
    input: string,
  }): Category {
    const stream = this._runtime.call_stream("ClassifyMessage", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<Category>(raw.parsed)
    }
  }

  ClassifyMessage2 = async function* (args: {
    input: string,
  }): Category {
    const stream = this._runtime.call_stream("ClassifyMessage2", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<Category>(raw.parsed)
    }
  }

  ClassifyMessage3 = async function* (args: {
    input: string,
  }): Category {
    const stream = this._runtime.call_stream("ClassifyMessage3", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<Category>(raw.parsed)
    }
  }

  DescribeImage = async function* (args: {
    img: baml_ts.Image,
  }): string {
    const stream = this._runtime.call_stream("DescribeImage", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  DescribeImage2 = async function* (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string {
    const stream = this._runtime.call_stream("DescribeImage2", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  DescribeImage3 = async function* (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string {
    const stream = this._runtime.call_stream("DescribeImage3", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  DescribeImage4 = async function* (args: {
    classWithImage: ClassWithImage,
    img2: baml_ts.Image,
  }): string {
    const stream = this._runtime.call_stream("DescribeImage4", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  ExtractNames = async function* (args: {
    input: string,
  }): string[] {
    const stream = this._runtime.call_stream("ExtractNames", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string[]>(raw.parsed)
    }
  }

  ExtractResume = async function* (args: {
    resume: string,
  }): Resume {
    const stream = this._runtime.call_stream("ExtractResume", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<Resume>(raw.parsed)
    }
  }

  ExtractResume2 = async function* (args: {
    resume: string,
  }): Resume {
    const stream = this._runtime.call_stream("ExtractResume2", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<Resume>(raw.parsed)
    }
  }

  FnClassOptionalOutput2_V2 = async function* (args: {
    input: string,
  }): ClassOptionalOutput2v2 | null {
    const stream = this._runtime.call_stream("FnClassOptionalOutput2_V2", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<ClassOptionalOutput2v2 | null>(raw.parsed)
    }
  }

  FnOutputClassWithEnum_V2 = async function* (args: {
    input: string,
  }): TestClassWithEnum2 {
    const stream = this._runtime.call_stream("FnOutputClassWithEnum_V2", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<TestClassWithEnum2>(raw.parsed)
    }
  }

  GetDataType = async function* (args: {
    text: string,
  }): RaysData {
    const stream = this._runtime.call_stream("GetDataType", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<RaysData>(raw.parsed)
    }
  }

  GetOrderInfo = async function* (args: {
    email: Email,
  }): OrderInfo {
    const stream = this._runtime.call_stream("GetOrderInfo", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<OrderInfo>(raw.parsed)
    }
  }

  GetQuery = async function* (args: {
    query: string,
  }): SearchParams {
    const stream = this._runtime.call_stream("GetQuery", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<SearchParams>(raw.parsed)
    }
  }

  OptionalTest_Function_V2 = async function* (args: {
    input: string,
  }): (OptionalTest_ReturnTypev2 | null)[] {
    const stream = this._runtime.call_stream("OptionalTest_Function_V2", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<(OptionalTest_ReturnTypev2 | null)[]>(raw.parsed)
    }
  }

  V2_FnClassOptional = async function* (args: {
    input: OptionalClassv2 | null,
  }): string {
    const stream = this._runtime.call_stream("V2_FnClassOptional", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_FnClassOptional2 = async function* (args: {
    input: ClassOptionalFieldsv2,
  }): string {
    const stream = this._runtime.call_stream("V2_FnClassOptional2", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_FnEnumListOutput = async function* (args: {
    input: string,
  }): EnumOutput[] {
    const stream = this._runtime.call_stream("V2_FnEnumListOutput", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<EnumOutput[]>(raw.parsed)
    }
  }

  V2_FnEnumOutput = async function* (args: {
    input: string,
  }): EnumOutput2 {
    const stream = this._runtime.call_stream("V2_FnEnumOutput", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<EnumOutput2>(raw.parsed)
    }
  }

  V2_FnNamedArgsSingleStringOptional = async function* (args: {
    myString: string | null,
  }): string {
    const stream = this._runtime.call_stream("V2_FnNamedArgsSingleStringOptional", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_FnOutputBool = async function* (args: {
    input: string,
  }): boolean {
    const stream = this._runtime.call_stream("V2_FnOutputBool", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<boolean>(raw.parsed)
    }
  }

  V2_FnOutputClass = async function* (args: {
    input: string,
  }): TestOutputClass2 {
    const stream = this._runtime.call_stream("V2_FnOutputClass", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<TestOutputClass2>(raw.parsed)
    }
  }

  V2_FnOutputClassList = async function* (args: {
    input: string,
  }): TestOutputClass[] {
    const stream = this._runtime.call_stream("V2_FnOutputClassList", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<TestOutputClass[]>(raw.parsed)
    }
  }

  V2_FnOutputStringList = async function* (args: {
    input: string,
  }): string[] {
    const stream = this._runtime.call_stream("V2_FnOutputStringList", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string[]>(raw.parsed)
    }
  }

  V2_FnStringOptional = async function* (args: {
    input: string | null,
  }): string {
    const stream = this._runtime.call_stream("V2_FnStringOptional", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_FnTestNamedArgsSingleEnum = async function* (args: {
    myArg: NamedArgsSingleEnum2,
  }): string {
    const stream = this._runtime.call_stream("V2_FnTestNamedArgsSingleEnum", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleBool = async function* (args: {
    myBool: boolean,
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleBool", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleClass = async function* (args: {
    myArg: NamedArgsSingleClass2,
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleClass", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleEnumList = async function* (args: {
    myArg: NamedArgsSingleEnumList2[],
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleEnumList", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleFloat = async function* (args: {
    myFloat: number,
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleFloat", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleInt = async function* (args: {
    myInt: number,
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleInt", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleString = async function* (args: {
    myString: string,
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleString", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleStringArray = async function* (args: {
    myStringArray: string[],
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleStringArray", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSingleStringList = async function* (args: {
    myArg: NamedArgsSingleClassList2[],
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSingleStringList", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_TestFnNamedArgsSyntax = async function* (args: {
    var: string,
    var_with_underscores: string,
  }): string {
    const stream = this._runtime.call_stream("V2_TestFnNamedArgsSyntax", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<string>(raw.parsed)
    }
  }

  V2_UnionTest_Function = async function* (args: {
    input: string | boolean,
  }): UnionTest_ReturnTypev2 | DataType {
    const stream = this._runtime.call_stream("V2_UnionTest_Function", args, {})
    for await (const raw of stream) {
      yield UNSUPPORTED_DO_NOT_SHIP_type_cast<UnionTest_ReturnTypev2 | DataType>(raw.parsed)
    }
  }

}