name: Bump versions

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      CLI:
        description: "Rust CLI"
        required: false
        type: choice
        options:
          - none
          - prerelease
          - pre
          - patch
          - minor
          - major
        default: none
      CLIENT_PYTHON:
        description: "Python Client"
        required: false
        type: choice
        options:
          - none
          - prerelease
          - pre
          - patch
          - minor
          - major
        default: none
      VSCODE_EXT:
        description: "VSCode Extension"
        required: false
        type: choice
        options:
          - none
          - prerelease
          - pre
          - patch
          - minor
          - major
        default: none

jobs:
  bump_version:
    runs-on: ubuntu-latest

    if: github.event.inputs.CLI != 'none' || github.event.inputs.CLIENT_PYTHON != 'none' || github.event.inputs.VSCODE_EXT != 'none'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip

      - name: Install bumpversion
        run: |
          python -m pip install --upgrade pip
          pip install bumpversion

      - name: Bump version - vscode-ext
        id: vscode_ext
        if: github.event.inputs.VSCODE_EXT != 'none'
        run: |
          VERSION=$(bumpversion --allow-dirty ${{ github.event.inputs.VSCODE_EXT }} --list | grep new_version | cut -d '=' -f 2)
          echo "::notice file=vscode-ext/package.json::Upgrading to version ${VERSION}"
          echo "COMMIT_MSG=${COMMIT_MSG} [BUMP:vscode_ext:${VERSION}]" >> $GITHUB_ENV
        working-directory: ./vscode-ext

      - name: Bump version - cli
        id: cli
        if: github.event.inputs.CLI != 'none'
        run: |
          VERSION=$(bumpversion --allow-dirty ${{ github.event.inputs.CLI }} --list | grep new_version | cut -d '=' -f 2)
          echo "::notice file=cli/Cargo.toml::Upgrading to version ${VERSION}"
          echo "COMMIT_MSG=${COMMIT_MSG} [BUMP:cli:${VERSION}]" >> $GITHUB_ENV
        working-directory: ./cli

      - name: Bump version - client_python
        id: py_client
        if: github.event.inputs.CLIENT_PYTHON != 'none'
        run: |
          VERSION=$(bumpversion --allow-dirty ${{ github.event.inputs.CLIENT_PYTHON }} --list | grep new_version | cut -d '=' -f 2)
          echo "::notice file=clients/python/pyproject.toml::Upgrading to version ${VERSION}"
          echo "COMMIT_MSG=${COMMIT_MSG} [BUMP:py_client:${VERSION}]" >> $GITHUB_ENV
        working-directory: ./clients/python
      
      - id: commit
        run: |
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b ${{ github.actor_id }}/bump-version
          git commit -am "${COMMIT_MSG}"
      - id: pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin ${{ github.actor_id }}/bump-version
          gh pr create --title "${COMMIT_MSG}" --body "Automated flow to bump version${COMMIT_MSG}" --label "auto-bump" --head -a hellovai
